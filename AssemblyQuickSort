////////////////////////////////////////////////////////////////////////////////
// Lab 6
////////////////////////////////////////////////////////////////////////////////

// Include the checkoff program:
.include "checkoff.uasm"

// Leave the following as zero to run ALL the test cases, and get your solution
//   validated if all pass.  If you have trouble with test case N, set it to N
//   to run JUST that test case (for easier debugging):
TestCase:       LONG(0)

// Quicksort-in-place code.  We include the C/Python version here as a comment;
// you can use this as a model for your Beta assembly version:

//def partition(array,left,right):
//    # choose middle element of array as pivot
//    pivotIndex = (left+right) >> 1;
//    pivotValue = array[pivotIndex]
//
//    # swap array[right] and array[pivotIndex]
//    # note that we already store array[pivotIndex] in pivotValue
//    array[pivotIndex] = array[right]
//
//    # elements <= the pivot are moved to the left (smaller indices)
//    storeIndex = left
//    for i in xrange(left,right):  # don't include array[right]
//        temp = array[i]
//        if temp <= pivotValue:
//            array[i] = array[storeIndex]
//            array[storeIndex] = temp
//            storeIndex += 1
//
//    # move pivot to its final place
//    array[right] = array[storeIndex]
//    array[storeIndex] = pivotValue;
//    return storeIndex;

partition:
        PUSH(LP)
        PUSH(BP)
        MOVE(SP, BP)
// Fill in your code here...

		PUSH(R1)
		PUSH(R2)
		PUSH(R3)
		PUSH(R4)
		PUSH(R5)
		PUSH(R6)
		PUSH(R7)
		PUSH(R8)
		PUSH(R9)
		PUSH(R10)
		PUSH(R11)
		PUSH(R12)
		
		LD(BP,-12,R1) //array
		LD(BP,-16,R2) //left
		LD(BP,-20,R3) //right
		ADD(R2,R3,R4)
		SHRC(R4,1,R4) //R4 = pivotindex
		MULC(R4,4,R5)
		ADD(R5,R1,R5) //R5 = array[pivotIndex] memory location
		LD(R5,0,R6) //R6 = pivotValue
		//
		MULC(R3,4,R7)
		ADD(R7,R1,R7)
		LD(R7,0,R7) //Load the memory to register
		ST(R7,0,R5)  // array[pivotIndex] = array[right]
		//
		MOVE(R2,R7)//R7 = storeIndex
		MOVE(R2,R8)//R8 = i = left
		
LOOP:
		MULC(R8,4,R9)
		ADD(R9,R1,R9)
		LD(R9,0,R9)  //R9 = temp
		CMPLE(R9,R6,R10)
		BF(R10,ENDIF)
		// IF
		MULC(R7,4,R10)
		ADD(R10,R1,R10) //R10=array[storeIndex] address
		LD(R10,0,R12)
		MULC(R8,4,R11)
		ADD(R11,R1,R11)
		ST(R12,0,R11) //array[i] = array[storeIndex]
		ST(R9,0,R10)
		ADDC(R7,1,R7)
		

ENDIF:
		//LOOPE
		ADDC(R8,1,R8)
		CMPLT(R8,R3,R9)
		BT(R9,LOOP) //R9 is temporary
		// TESTED R8-R11 are freed
		
		MULC(R7,4,R8)
		ADD(R8,R1,R8)
		LD(R8,0,R10)
		MULC(R3,4,R9)
		ADD(R9,R1,R9)
		ST(R10,0,R9) //array[right] = array[storeIndex]
		ST(R6,0,R8) //?
		MOVE(R7,R0)
		
		//clean up
		POP(R12)
		POP(R11)
		POP(R10)
		POP(R9)
		POP(R8)
		POP(R7)
		POP(R6)
		POP(R5)
		POP(R4)
		POP(R3)
		POP(R2)
		POP(R1)

		
        POP(BP)
        POP(LP)
        JMP(LP)


//def quicksort(array, left, right):
//    if left < right:
//        pivotIndex = partition(array,left,right)
//        quicksort(array,left,pivotIndex-1)
//        quicksort(array,pivotIndex+1,right)

// quicksort(ArrayBase, left, right)
quicksort:
        PUSH(LP)
        PUSH(BP)
        MOVE(SP, BP)

// Fill in your code here...
		PUSH(R1)
		PUSH(R2)
		PUSH(R3)
		PUSH(R4)

		LD(BP,-12,R1) //array
		LD(BP,-16,R2) //left
		LD(BP,-20,R3) //right
		
		CMPLT(R2,R3,R4)
		BF(R4,END)
		
		//if
		PUSH(R3)
		PUSH(R2)
		PUSH(R1)
		BR(partition,LP)
		DEALLOCATE(3)
		
		MOVE(R0,R4) //R4=Pivotindex
		SUBC(R4,1,R4)
		PUSH(R4)
		PUSH(R2)
		PUSH(R1)
		BR(quicksort,LP)
		DEALLOCATE(3)
		
		ADDC(R4,2,R4)
		PUSH(R3)
		PUSH(R4)
		PUSH(R1)
		BR(quicksort,LP)
		DEALLOCATE(3)

END:
		POP(R4)
		POP(R3)
		POP(R2)
		POP(R1)
        POP(BP)
        POP(LP)
        JMP(LP)

// Allocate a stack: SP is initialized by checkoff code.
StackBasePtr:
        LONG(StackArea)

.unprotect

StackArea:
        STORAGE(1000)

